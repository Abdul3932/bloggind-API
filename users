const mongoose = require('mongoose');
const { Schema } = mongoose;

const userSchema = new Schema({
  first_name: { type: String, required: true },
  last_name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  // Additional fields can be added as needed
});

module.exports = mongoose.model('User', userSchema);
const mongoose = require('mongoose');
const { Schema } = mongoose;

const userSchema = new Schema({
  first_name: { type: String, required: true },
  last_name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  // Additional fields can be added as needed
});

module.exports = mongoose.model('User', userSchema);
const mongoose = require('mongoose');
const { Schema } = mongoose;

const blogSchema = new Schema({
  title: { type: String, required: true, unique: true },
  description: String,
  author: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  state: { type: String, enum: ['draft', 'published'], default: 'draft' },
  read_count: { type: Number, default: 0 },
  reading_time: { type: Number }, // in minutes
  tags: [String],
  body: { type: String, required: true },
  timestamp: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Blog', blogSchema);
app.post('/signup', async (req, res) => {
  const { first_name, last_name, email, password } = req.body;
  // Hash the password and save user
});
app.post('/signup', async (req, res) => {
  const { first_name, last_name, email, password } = req.body;
  // Hash the password and save user
});
app.post('/signin', async (req, res) => {
  const { email, password } = req.body;
  // Authenticate user and generate JWT token
});
app.post('/blogs', authenticateJWT, async (req, res) => {
  const { title, description, tags, body } = req.body;
  const newBlog = new Blog({
    title,
    description,
    author: req.user._id,
    tags,
    body,
    reading_time: calculateReadingTime(body),
  });
  await newBlog.save();
  res.status(201).json(newBlog);
});
app.put('/blogs/:id', authenticateJWT, async (req, res) => {
  const { id } = req.params;
  const { title, description, tags, body, state } = req.body;
  const blog = await Blog.findById(id);
  
  if (blog.author.toString() !== req.user._id.toString()) {
    return res.status(403).json({ error: 'Not authorized' });
  }

  blog.title = title || blog.title;
  blog.description = description || blog.description;
  blog.tags = tags || blog.tags;
  blog.body = body || blog.body;
  blog.state = state || blog.state;
  blog.reading_time = calculateReadingTime(blog.body);

  await blog.save();
  res.json(blog);
});
app.delete('/blogs/:id', authenticateJWT, async (req, res) => {
  const { id } = req.params;
  const blog = await Blog.findById(id);
  
  if (blog.author.toString() !== req.user._id.toString()) {
    return res.status(403).json({ error: 'Not authorized' });
  }

  await Blog.findByIdAndDelete(id);
  res.status(204).end();
});
app.get('/blogs', async (req, res) => {
  const { page = 1, limit = 20, state, author, title, tags, sort } = req.query;
  const query = { state: 'published' };

  if (author) query.author = author;
  if (title) query.title = new RegExp(title, 'i');
  if (tags) query.tags = { $in: tags.split(',') };

  const sortOptions = {};
  if (sort) sortOptions[sort] = -1;

  const blogs = await Blog.find(query)
    .sort(sortOptions)
    .skip((page - 1) * limit)
    .limit(parseInt(limit))
    .populate('author', 'first_name last_name email');
  
  res.json(blogs);
});
app.get('/blogs/:id', async (req, res) => {
  const { id } = req.params;
  const blog = await Blog.findById(id).populate('author', 'first_name last_name email');

  if (!blog) return res.status(404).json({ error: 'Blog not found' });

  blog.read_count += 1;
  await blog.save();

  res.json(blog);
});
app.get('/user/blogs', authenticateJWT, async (req, res) => {
  const { page = 1, limit = 20, state } = req.query;
  const query = { author: req.user._id };

  if (state) query.state = state;

  const blogs = await Blog.find(query)
    .skip((page - 1) * limit)
    .limit(parseInt(limit))
    .populate('author', 'first_name last_name email');
  
  res.json(blogs);
});
const jwt = require('jsonwebtoken');

const authenticateJWT = (req, res, next) => {
  const token = req.header('Authorization')?.split(' ')[1];

  if (!token) return res.status(401).json({ error: 'No token provided' });

  jwt.verify(token, 'your_jwt_secret', (err, user) => {
    if (err) return res.status(403).json({ error: 'Invalid token' });
    req.user = user;
    next();
  });
};
const calculateReadingTime = (text) => {
  const wordsPerMinute = 200; // Average reading speed
  const words = text.split(/\s+/).length;
  return Math.ceil(words / wordsPerMinute);
};
const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'combined.log' }),
    new winston.transports.Console()
  ],
});

module.exports = logger;
const request = require('supertest');
const app = require('../app'); // Your Express app
const mongoose = require('mongoose');
const User = require('../models/User');
const Blog = require('../models/Blog');

describe('Blog API', () => {
  let token;

  beforeAll(async () => {
    await mongoose.connect('mongodb://localhost:27017/blog-api', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });

    // Create a user and sign in to get a token
    const user = await User.create({ first_name: 'John', last_name: 'Doe', email: 'john@example.com', password: 'password' });
    const response = await request(app).post('/signin').send({ email: 'john@example.com', password: 'password' });
    token = response.body.token;
  });

  it('should create a new blog', async () => {
    const response = await request(app)
      .post('/blogs')
      .set('Authorization', `Bearer ${token}`)
      .send({ title: 'Test Blog', description: 'Description', body: 'Body text', tags: ['test'] });
    
    expect(response.status).toBe(201);
    expect(response.body.title).toBe('Test Blog');
  });

  // Add more tests for other endpoints and scenarios
});
